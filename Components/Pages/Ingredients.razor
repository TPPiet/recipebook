@page "/ingredients"
@using RecipeBook.Data
@inject Database DBService

<h3>Ingredients</h3>
<p>
    <button class="btn btn-success"
            @onclick="AddNewIngredients">
        Add New Ingredients
    </button>
</p>

<ul class="list-unstyled">
    @foreach (var ingredient in objIngredients)
    {
        <li>
            @ingredient.Name
            @ingredient.Amount
            @ingredient.Unit
            <button class="btn btn-secondary" @onclick="() => EditIngredient(ingredient)">Edit</button>
        </li>
    }
</ul>

@if (ShowEditPopup)
{
    <div class="modal" tabindex="-1" style="display:flex" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit @objIngredient.Name</h3>
                    <button type="button" class="close"
                            @onclick="CloseEditPopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-group">
                        <input class="form-control" type="text"
                               placeholder="@objIngredient.Name"
                               @bind="objIngredient.Name" />
                        <input class="form-control" type="text"
                               placeholder="@objIngredient.Amount"
                               @bind=objIngredient.Amount />
                        <select class="form-control"
                                @bind="objIngredient.Unit">
                            <option value="ml">ml</option>
                            <option value="dl">dl</option>
                            <option value="l">l</option>
                            <option value="g">g</option>
                            <option value="kg">kg</option>
                            <option value="pcs">pcs</option>
                            <option value="tsp">tsp</option>
                            <option value="tbsp">tbsp</option>
                            <option value="pinch">pinch</option>
                        </select>
                    </div>
                    <button class="btn btn-success"
                        @onclick="(() => DBSaveIngredient(objIngredient))">
                        Save
                    </button>
                    <button class="btn btn-danger"
                        @onclick="(() => DBDeleteIngredient(objIngredient))">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Popup for adding a new ingredients -->
@if (ShowAddPopup)
{
    <div class="modal" tabindex="-1" style="display:flex" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Add ingredient(s)</h3>
                    <button type="button" class="close"
                    @onclick="CloseAddPopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                @foreach (var ingredient in newIngredients)
                {
                    <div class="input-group">
                        <input class="form-control" type="text"
                               placeholder="@ingredient.Name"
                               @bind="ingredient.Name" />
                        <input class="form-control" type="text"
                               placeholder="@ingredient.Amount"
                               @bind=ingredient.Amount/>
                        <select class="form-control"
                                placeholder="@ingredient.Unit"
                                @bind="ingredient.Unit">
                            <option value="ml">ml</option>
                            <option value="dl">dl</option>
                            <option value="l">l</option>
                            <option value="g">g</option>
                            <option value="kg">kg</option>
                            <option value="pcs">pcs</option>
                            <option value="tsp">tsp</option>
                            <option value="tbsp">tbsp</option>
                            <option value="pinch">pinch</option>
                        </select>
                        <button class="btn btn-danger"
                            @onclick="(() => RemoveFromList(ingredient))" >
                            X
                        </button>
                    </div>
                    }
                    <button class="btn btn-primary"
                        @onclick="CreateNewIngredient">
                        Add a new ingredient
                    </button>
                    <button class="btn btn-success"
                        @onclick="(() => SaveListOfIngredients(newIngredients))">
                        Save
                    </button>
                    
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Ingredient> objIngredients = new();
    private List<Ingredient> newIngredients = new();
    Ingredient objIngredient = new Ingredient();
    bool ShowAddPopup = false;
    bool ShowEditPopup = false;
    string Error = "";

    protected override async Task OnInitializedAsync()
    {
        //Fetch ingredients
        objIngredients = await DBService.GetAllIngredientsAsync();
    }

    private void AddNewIngredients()
    {
        CreateNewIngredient();
        // Open the Popup
        ShowAddPopup = true;
    }

    private void CreateNewIngredient()
    {
        Ingredient ingredient = new Ingredient();
        ingredient.Id = 0;
        newIngredients.Add(ingredient);
    }

    async Task SaveListOfIngredients(List<Ingredient> ingredients)
    {
        ShowAddPopup = false;
        if(ingredients.Count == 0)
        {

            return;
        }
        else
        {
            foreach (var ingredient in ingredients)
            {
                // check if the ingredient is empty 
                if (ingredient == null || string.IsNullOrEmpty(ingredient.Name))
                {
                    continue;
                }

                if (objIngredients.Any(i => i.Name == ingredient.Name))
                {
                    // Add proper handling with a dialog box to ask user if they want to add increase the amount or replace the existing one
                    //Blazorise Validation could work
                    continue;
                }
                else
                {
                    await DBSaveIngredient(ingredient);
                }
            }
            ingredients.Clear();
        }
        
    }

    private void RemoveFromList(Ingredient ingredient)
    {
        newIngredients.Remove(ingredient);
    }

    private void EditIngredient(Ingredient ingredient)
    {
        objIngredient = ingredient;
        ShowEditPopup = true;
    }

    async Task DBSaveIngredient(Ingredient ingredient)
    {
        ShowEditPopup = false;

        try
        {
            //new ingredients have ID set to 0
            if (ingredient.Id == 0)
            {
                //Save the ingredient to the database
                var newIngredient = await DBService.CreateIngredientAsync(ingredient);
                //Add the recipe to the list
                objIngredients.Add(newIngredient);
            }
            else
            {
                //Updating existing ingredient
                await DBService.UpdateIngredientAsync(ingredient);
            }
            objIngredients = await DBService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    async Task DBDeleteIngredient(Ingredient ingredient)
    {
        ShowEditPopup = false;
        try
        {
            Error="";
            await DBService.DeleteIngredientAsync(ingredient);
            objIngredients = await DBService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        
    }

    private void CloseAddPopup()
    {
        ShowAddPopup = false;
    }

    private void CloseEditPopup()
    {
        ShowEditPopup = false;
    }
}
