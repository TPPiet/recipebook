@page "/ingredients"
@using RecipeBook.Data
@inject Database DBService

<PageTitle>Ingredients</PageTitle>

<Button Color="Color.Primary" Clicked="AddNewIngredients">
    Add New Ingredients
</Button>

<ListGroup Mode="ListGroupMode.Selectable">
    @foreach (var ingredient in objIngredients)
    {
        <ListGroupItem Name="@ingredient.Id.ToString()" Clicked="() => EditIngredient(ingredient)">
            @ingredient.Name
            @ingredient.Amount
            @ingredient.Unit
        </ListGroupItem>
    }
</ListGroup>

<Modal @ref="editModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit ingredient</ModalTitle>
                <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Fields>
                <Field>
                    <FieldLabel RequiredIndicator> Name </FieldLabel> 
                    <FieldBody>
                        <TextEdit @bind-Text="SelectedIngredient.Name" Placeholder="@SelectedIngredient.Name"/>
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Amount</FieldLabel>
                    <FieldBody>
                        <NumericEdit @bind-Value="SelectedIngredient.Amount" Placeholder="@SelectedIngredient.Amount.ToString()" />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Unit</FieldLabel>
                    <FieldBody>
                        <Select @bind-SelectedValue="SelectedIngredient.Unit" Placeholder="@SelectedIngredient.Unit">
                            @foreach (var unit in units)
                            {
                                <SelectItem TValue="string">@unit</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>
            </Fields>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" Clicked="(() => DBSaveIngredient(SelectedIngredient))">
                Save
            </Button>
            <Button Color="Color.Danger" Clicked="(() => DBDeleteIngredient(SelectedIngredient))">
                Delete
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="addModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add ingredient(s)</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @foreach (var ingredient in newIngredients)
            {
                <Fields>
                    <Field>
                        <FieldBody>
                            <TextEdit Placeholder="Name" @bind-Text="ingredient.Name"/>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldBody>
                            <NumericEdit Placeholder="Amount" @bind-Value="ingredient.Amount" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldBody>
                            <Select @bind-SelectedValue="ingredient.Unit">
                                @foreach (var unit in units)
                                    {
                                        <SelectItem TValue="string">@unit</SelectItem>
                                    }
                            </Select>
                        </FieldBody>
                    </Field>
                    <Field>
                        <Button Color="Color.Danger" Clicked="(() => RemoveFromList(ingredient))">
                            X
                        </Button>
                    </Field>
                </Fields>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@CreateNewIngredient">
                Add Another Ingredient
            </Button>
            <Button Color="Color.Success" Clicked="(() => SaveListOfIngredients(newIngredients))">
                Save
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<Ingredient> objIngredients = new();
    private List<Ingredient> newIngredients = new();
    Ingredient SelectedIngredient = new Ingredient();
    private Modal editModal;
    private Modal addModal;
    string Error = "";
    private List<String> units = Data.Units.IngredientList;

    protected override async Task OnInitializedAsync()
    {
        //Fetch ingredients
        objIngredients = await DBService.GetAllIngredientsAsync();
    }

    private void AddNewIngredients()
    {
        CreateNewIngredient();
        // Open the Popup
        ShowAddModal();
    }

    private void CreateNewIngredient()
    {
        Ingredient ingredient = new Ingredient();
        ingredient.Id = 0;
        newIngredients.Add(ingredient);
    }

    async Task SaveListOfIngredients(List<Ingredient> ingredients)
    {
        await HideAddModal();
        if(ingredients.Count == 0)
        {
            return;
        }
        else
        {
            //check if the ingredient is empty, and remove empty ones
            for(int i=ingredients.Count -1; i >= 0; i--)
            {
                if (ingredients[i] == null || string.IsNullOrEmpty(ingredients[i].Name))
                {
                    ingredients.RemoveAt(i);
                }
            }

            foreach (var ingredient in ingredients)
            {
                var existingIngredient = objIngredients.Find(i => i.Name == ingredient.Name);

                if (existingIngredient != null)
                {
                    //For now if the ingredient name is same as an existing one, the amount will be increased
                    //Improve by asking user if amount should be increased or replaced, Blazorise Validation could work
                    // NEED TO ADD UNIT CONVERSION
                    if (existingIngredient.Unit.Equals(ingredient.Unit))
                    {
                        existingIngredient.Amount += ingredient.Amount;
                        await DBService.UpdateIngredientAsync(existingIngredient);
                    }
                }
                else
                {
                    await DBSaveIngredient(ingredient);
                }
            }
            ingredients.Clear();
        }

    }

    private void RemoveFromList(Ingredient ingredient)
    {
        newIngredients.Remove(ingredient);
    }

    private void EditIngredient(Ingredient ingredient)
    {
        SelectedIngredient = ingredient;
        ShowEditModal();
    }

    async Task DBSaveIngredient(Ingredient ingredient)
    {
        await HideEditModal();

        try
        {
            //new ingredients have ID set to 0
            if (ingredient.Id == 0)
            {
                //Save the ingredient to the database
                var newIngredient = await DBService.CreateIngredientAsync(ingredient);
                //Add the recipe to the list
                objIngredients.Add(newIngredient);
            }
            else
            {
                //Updating existing ingredient
                Console.WriteLine(ingredient);
                await DBService.UpdateIngredientAsync(ingredient);
            }
            objIngredients = await DBService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    async Task DBDeleteIngredient(Ingredient ingredient)
    {
        await HideEditModal();
        try
        {
            Error="";
            await DBService.DeleteIngredientAsync(ingredient);
            objIngredients = await DBService.GetAllIngredientsAsync();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        
    }

    private Task ShowEditModal()
    {
        return editModal.Show();
    }

    private Task HideEditModal()
    {
        return editModal.Hide();
    }

    private Task ShowAddModal()
    {
        return addModal.Show();
    }

    private Task HideAddModal()
    {
        return addModal.Hide();
    }
}
