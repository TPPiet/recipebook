@page "/"
@using RecipeBook.Data
@inject Database DBService

<PageTitle>Recipes</PageTitle>

@if (recipes == null)
{
	<!-- Show this if theres no recipes -->
    <Paragraph>No recipes</Paragraph>
}
else
{
    @foreach (var recipe in recipes)
    {
        <Paragraph>
            @recipe.Name
            <Button Color="Color.Primary" Clicked="() => EditRecipe(recipe)">Edit</Button>
        </Paragraph>
    }

    <Paragraph>
        <Button Color="Color.Success"
            Clicked="AddNewRecipe">
            Add a New Recipe
        </Button>
    </Paragraph>
}

<Modal @ref="addModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add a New Recipe</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldBody>
                    <TextEdit Placeholder="Recipe Name" @bind-Text="objRecipe.Name" />
                </FieldBody>
            </Field>
            @foreach (var ingredient in objIngredients)
            {
                <Fields>
                    <Field>
                        <FieldBody>
                            <TextEdit Placeholder="Name" @bind-Text="ingredient.Name" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldBody>
                            <NumericEdit Placeholder="Amount" @bind-Value="ingredient.Amount" />
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldBody>
                            <Select @bind-SelectedValue="ingredient.Unit">
                                @foreach (var unit in units)
                                {
                                    <SelectItem TValue="string">@unit</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Fields>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="AddIngredient">
                Add an ingredient
            </Button>
            <!-- Add rest of the attributes for recipe-->
            <!-- Button to save the Recipe -->
            <Button Color="Color.Success" Clicked="SaveRecipe">
                Save
            </Button>
            @if (objRecipe.Id > 0)
            {
                <!-- Button to delete the recipe -->
                <Button Color="Color.Danger" Clicked="DeleteRecipe">
                    Delete
                </Button>
            }
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    string Error = "";
    List<Recipe> recipes = new List<Recipe>();
    Recipe objRecipe = new Recipe();
    private Modal addModal;
    private List<RecipeIngredient> objIngredients = new();
    private List<String> units = Data.Units.IngredientList;
    protected override async Task OnInitializedAsync()
    {
        //Fetch recipes
        recipes = await DBService.GetRecipeAsync();
    }

    void AddNewRecipe()
    {
        // Make new recipe
        objRecipe = new Recipe();
        // Set Id to 0 so we know it is a new recipe
        objRecipe.Id = 0;
        //initialize the ingredient list
        objRecipe.Ingredients = new List<RecipeIngredient>();
        // Clear objIngredients
        objIngredients.Clear();
        // Open the Popup
        ShowAddModal();
    }

    async Task EditRecipe(Recipe recipe)
    {
        //set as current recipe
        objRecipe = recipe;
        //get the ingredients
        objIngredients = await DBService.GetRecipeIngredientAsync(recipe.Id);
        await ShowAddModal();
    }

    async Task DeleteRecipe()
    {
        //Close the popup
        await HideAddModal();
        try
        {
            Error = "";
            //Delete the selected recipe
            await DBService.DeleteRecipeAsync(objRecipe);
            recipes.Remove(objRecipe);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    void AddIngredient()
    {
        var newIngredient = new RecipeIngredient();
        objIngredients.Add(newIngredient);
    }

    async Task SaveRecipe()
    {
        //close the popup first
        await HideAddModal();

        try
        {
            //new recipes have ID set to 
            if (objRecipe.Id == 0)
            {
                //create new recipe
                Recipe objNewRecipe = new Recipe();
                objNewRecipe.Name = objRecipe.Name;
                objNewRecipe.Ingredients = objIngredients;

                //Save the result to the database
                var NewRecipe = await DBService.CreateRecipeAsync(objNewRecipe);
                //Add the recipe to the list
                recipes.Add(NewRecipe);
            }
            else
            {
                //Updating existing recipe
                await DBService.UpdateRecipeAsync(objRecipe);
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private Task ShowAddModal()
    {
        return addModal.Show();
    }

    private Task HideAddModal()
    {
        return addModal.Hide();
    }
}
