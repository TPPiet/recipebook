@page "/"
@using RecipeBook.Data
@inject Database DBService

<PageTitle>Recipes</PageTitle>

@if (recipes == null)
{
	<!-- Show this if theres no recipes -->
    <Paragraph>No recipes</Paragraph>
}
else
{
    @foreach (var recipe in recipes)
    {
        <Paragraph>
            @recipe.Name
            <Button Color="Color.Primary" Clicked="() => EditRecipe(recipe)">Edit</Button>
        </Paragraph>
    }

    <Paragraph>
        <Button Color="Color.Success"
            Clicked="AddNewRecipe">
            Add a New Recipe
        </Button>
    </Paragraph>
}

<Modal @ref="addModal">
    <ModalContent Centered>
        <ModalHeader>
            @if (objRecipe.Id == 0)
            {
                <ModalTitle>Add a New Recipe</ModalTitle>
            }
            else
            {
                <ModalTitle>@objRecipe.Name</ModalTitle>
            }

            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                <Items>
                    <Tab Name="ingredients">Ingredients</Tab>
                    <Tab Name="instructions">Instructions</Tab>
                </Items>
                <Content>
                    <TabPanel Name="ingredients">
                        <Field>
                            <FieldBody>
                                <TextEdit Placeholder="Recipe Name" @bind-Text="objRecipe.Name" />
                            </FieldBody>
                        </Field>
                        @foreach (var ingredient in objIngredients)
                        {
                            <Fields>
                                <Field>
                                    <FieldBody>
                                        <TextEdit Placeholder="Name" @bind-Text="ingredient.Name" />
                                    </FieldBody>
                                </Field>
                                <Field>
                                    <FieldBody>
                                        <NumericEdit Placeholder="Amount" @bind-Value="ingredient.Amount" />
                                    </FieldBody>
                                </Field>
                                <Field>
                                    <FieldBody>
                                        <Select @bind-SelectedValue="ingredient.Unit">
                                            @foreach (var unit in units)
                                            {
                                                <SelectItem TValue="string">@unit</SelectItem>
                                            }
                                        </Select>
                                    </FieldBody>
                                </Field>
                                <Field>
                                    <Button Color="Color.Warning"
                                            Clicked="() => DeleteIngredient(ingredient)">
                                        X
                                    </Button>
                                </Field>
                            </Fields>
                        }
                    </TabPanel>
                    <TabPanel Name="instructions">
                        @foreach (var instruction in objInstructions)
                        {
                            
                            <Fields>
                                <Field ColumnSize="ColumnSize.Is1" Position="Position.Relative">
                                    <FieldBody>
                                        @(objInstructions.IndexOf(instruction) + 1+".")
                                    </FieldBody>
                                </Field>
                                <Field>
                                    <FieldBody ColumnSize="ColumnSize.Is10" Position="Position.Relative">
                                        <MemoEdit AutoSize="true" Size="Size.Small" Placeholder="Add an instruction" @bind-Text="instruction.InstructionText" />
                                    </FieldBody>
                                </Field>
                                <Field ColumnSize="ColumnSize.Is1" Position="Position.Relative">
                                    <Button Color="Color.Warning"
                                            Clicked="() => DeleteInstruction(instruction)">
                                        X
                                    </Button>
                                </Field>
                            </Fields>
                        }
                    </TabPanel>
                </Content>
            </Tabs>
            
        </ModalBody>
        <ModalFooter>
            @if (selectedTab.Equals("ingredients"))
            {
                <Button Color="Color.Primary" Clicked="AddIngredient">
                    Add an ingredient
                </Button>
            }else if (selectedTab.Equals("instructions"))
            {
                <Button Color="Color.Primary" Clicked="AddInstruction">
                    Add an instruction
                </Button>
            }
            <!-- Button to save the Recipe -->
            <Button Color="Color.Success" Clicked="SaveRecipe">
                Save
            </Button>
            @if (objRecipe.Id > 0)
            {
                <!-- Button to delete the recipe -->
                <Button Color="Color.Danger" Clicked="DeleteRecipe">
                    Delete
                </Button>
            }
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    string Error = "";
    List<Recipe> recipes = new List<Recipe>();
    Recipe objRecipe = new Recipe();
    private Modal addModal;
    private List<RecipeIngredient> objIngredients = new();
    private List<Instruction> objInstructions = new();
    private List<String> units = Data.Units.IngredientList;
    string selectedTab = "ingredients";
    protected override async Task OnInitializedAsync()
    {
        //Fetch recipes
        recipes = await DBService.GetRecipeAsync();
    }

    void AddNewRecipe()
    {
        // Make new recipe
        objRecipe = new Recipe();
        // Set Id to 0 so we know it is a new recipe
        objRecipe.Id = 0;
        //initialize the ingredient list
        objRecipe.Ingredients = new List<RecipeIngredient>();
        //initialize the instructions list
        objRecipe.Instructions = new List<Instruction>();
        // Clear objIngredients
        objIngredients.Clear();
        objInstructions.Clear();
        // Open the Popup
        ShowAddModal();
    }

    async Task EditRecipe(Recipe recipe)
    {
        //set as current recipe
        objRecipe = recipe;
        //get the ingredients and instructions
        objIngredients = await DBService.GetRecipeIngredientAsync(recipe.Id);
        objInstructions = await DBService.GetRecipeInstructionsAsync(recipe.Id);
    ShowAddModal();
    }

    async Task DeleteRecipe()
    {
        //Close the popup
        await HideAddModal();
        try
        {
            Error = "";
            //Delete the selected recipe
            await DBService.DeleteRecipeAsync(objRecipe);
            recipes.Remove(objRecipe);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    void AddIngredient()
    {
        var newIngredient = new RecipeIngredient();
        objIngredients.Add(newIngredient);
    }

    void DeleteIngredient(RecipeIngredient ingredient)
    {
        objIngredients.Remove(ingredient);
    }

    void AddInstruction()
    {
        var newInstruction = new Instruction();
        objInstructions.Add(newInstruction);
    }

    void DeleteInstruction(Instruction instruction)
    {
        objInstructions.Remove(instruction);
    }

    async Task SaveRecipe()
    {
        //close the popup first
        await HideAddModal();

        try
        {
            //new recipes have ID set to 
            if (objRecipe.Id == 0)
            {
                //create new recipe
                Recipe objNewRecipe = new Recipe();
                objNewRecipe.Name = objRecipe.Name;
                objNewRecipe.Ingredients = objIngredients;
                objNewRecipe.Instructions = objInstructions;

                //Save the result to the database
                var NewRecipe = await DBService.CreateRecipeAsync(objNewRecipe);
                //Add the recipe to the list
                recipes.Add(NewRecipe);
            }
            else
            {
                //Updating existing recipe
                objRecipe.Ingredients = objIngredients;
                objRecipe.Instructions = objInstructions;
                await DBService.UpdateRecipeAsync(objRecipe);
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private Task ShowAddModal()
    {
        return addModal.Show();
    }

    private Task HideAddModal()
    {
        return addModal.Hide();
    }

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        return Task.CompletedTask;
    }
}